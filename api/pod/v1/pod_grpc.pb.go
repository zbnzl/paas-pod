// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: pod/v1/pod.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Pod_AddPod_FullMethodName      = "/api.pod.v1.Pod/AddPod"
	Pod_DeletePod_FullMethodName   = "/api.pod.v1.Pod/DeletePod"
	Pod_FindPodByID_FullMethodName = "/api.pod.v1.Pod/FindPodByID"
	Pod_UpdatePod_FullMethodName   = "/api.pod.v1.Pod/UpdatePod"
	Pod_FindAllPod_FullMethodName  = "/api.pod.v1.Pod/FindAllPod"
)

// PodClient is the client API for Pod service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PodClient interface {
	AddPod(ctx context.Context, in *PodInfo, opts ...grpc.CallOption) (*Response, error)
	DeletePod(ctx context.Context, in *PodId, opts ...grpc.CallOption) (*Response, error)
	FindPodByID(ctx context.Context, in *PodId, opts ...grpc.CallOption) (*PodInfo, error)
	UpdatePod(ctx context.Context, in *PodInfo, opts ...grpc.CallOption) (*Response, error)
	FindAllPod(ctx context.Context, in *FindAll, opts ...grpc.CallOption) (*AllPod, error)
}

type podClient struct {
	cc grpc.ClientConnInterface
}

func NewPodClient(cc grpc.ClientConnInterface) PodClient {
	return &podClient{cc}
}

func (c *podClient) AddPod(ctx context.Context, in *PodInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Pod_AddPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podClient) DeletePod(ctx context.Context, in *PodId, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Pod_DeletePod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podClient) FindPodByID(ctx context.Context, in *PodId, opts ...grpc.CallOption) (*PodInfo, error) {
	out := new(PodInfo)
	err := c.cc.Invoke(ctx, Pod_FindPodByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podClient) UpdatePod(ctx context.Context, in *PodInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Pod_UpdatePod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podClient) FindAllPod(ctx context.Context, in *FindAll, opts ...grpc.CallOption) (*AllPod, error) {
	out := new(AllPod)
	err := c.cc.Invoke(ctx, Pod_FindAllPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PodServer is the server API for Pod service.
// All implementations must embed UnimplementedPodServer
// for forward compatibility
type PodServer interface {
	AddPod(context.Context, *PodInfo) (*Response, error)
	DeletePod(context.Context, *PodId) (*Response, error)
	FindPodByID(context.Context, *PodId) (*PodInfo, error)
	UpdatePod(context.Context, *PodInfo) (*Response, error)
	FindAllPod(context.Context, *FindAll) (*AllPod, error)
	mustEmbedUnimplementedPodServer()
}

// UnimplementedPodServer must be embedded to have forward compatible implementations.
type UnimplementedPodServer struct {
}

func (UnimplementedPodServer) AddPod(context.Context, *PodInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPod not implemented")
}
func (UnimplementedPodServer) DeletePod(context.Context, *PodId) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePod not implemented")
}
func (UnimplementedPodServer) FindPodByID(context.Context, *PodId) (*PodInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPodByID not implemented")
}
func (UnimplementedPodServer) UpdatePod(context.Context, *PodInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePod not implemented")
}
func (UnimplementedPodServer) FindAllPod(context.Context, *FindAll) (*AllPod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllPod not implemented")
}
func (UnimplementedPodServer) mustEmbedUnimplementedPodServer() {}

// UnsafePodServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PodServer will
// result in compilation errors.
type UnsafePodServer interface {
	mustEmbedUnimplementedPodServer()
}

func RegisterPodServer(s grpc.ServiceRegistrar, srv PodServer) {
	s.RegisterService(&Pod_ServiceDesc, srv)
}

func _Pod_AddPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServer).AddPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pod_AddPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServer).AddPod(ctx, req.(*PodInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pod_DeletePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServer).DeletePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pod_DeletePod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServer).DeletePod(ctx, req.(*PodId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pod_FindPodByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServer).FindPodByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pod_FindPodByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServer).FindPodByID(ctx, req.(*PodId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pod_UpdatePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServer).UpdatePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pod_UpdatePod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServer).UpdatePod(ctx, req.(*PodInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pod_FindAllPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServer).FindAllPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pod_FindAllPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServer).FindAllPod(ctx, req.(*FindAll))
	}
	return interceptor(ctx, in, info, handler)
}

// Pod_ServiceDesc is the grpc.ServiceDesc for Pod service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pod_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.pod.v1.Pod",
	HandlerType: (*PodServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPod",
			Handler:    _Pod_AddPod_Handler,
		},
		{
			MethodName: "DeletePod",
			Handler:    _Pod_DeletePod_Handler,
		},
		{
			MethodName: "FindPodByID",
			Handler:    _Pod_FindPodByID_Handler,
		},
		{
			MethodName: "UpdatePod",
			Handler:    _Pod_UpdatePod_Handler,
		},
		{
			MethodName: "FindAllPod",
			Handler:    _Pod_FindAllPod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pod/v1/pod.proto",
}
