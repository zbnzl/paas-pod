syntax = "proto3";

package api.pod.v1;

import "google/api/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/zbnzl/paas-pod/api/pod/v1;v1";
option java_multiple_files = true;
option java_package = "api.pod.v1";

service Pod {
	rpc AddPod(PodInfo) returns (Response) {
		option (google.api.http) = {
			post: "/v1/pod",
			body: "*"
		};
	}
	rpc DeletePod(PodId) returns (Response) {
		option (google.api.http) = {
			delete: "/v1/pod"
		};
	}
	rpc FindPodByID(PodId) returns (PodInfo) {
		option (google.api.http) = {
			get: "/v1/pod"
		};
	}
	rpc UpdatePod(PodInfo) returns (Response) {
		option (google.api.http) = {
			put: "/v1/pod",
			body: "*"
		};
	}
	rpc FindAllPod(FindAll) returns (AllPod){
		option (google.api.http) = {
			get: "/v1/pods"
		};
	}
}

message PodInfo {
	int64 id = 1;
	string pod_namespace = 2;
	string pod_name = 3 [(validate.rules).string.min_len = 1];
	string pod_team_id = 4;
	float pod_cpu_max = 5;
	int32 pod_replicas =6;
	float pod_memory_max =7;
	repeated PodPort pod_port =8;
	repeated PodEnv pod_env =9;
	string pod_pull_policy=10;
	string pod_restart =11;
	string pod_type=12;
	string pod_image=13;
	float pod_cpu_min = 14;
	float pod_memory_min =15;


}

message PodPort {
	int64 pod_id =1;
	int32 container_port =2;
	string protocol =3;
}

message PodEnv {
	int64 pod_id =1;
	string env_key =2;
	string env_value =3;
}
message PodId {
	int64 id =1;
}
message Response {
	string msg =1;
}

message FindAll{

}

message AllPod {
	repeated PodInfo pod_info =1 ;
}