// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pod/v1/pod.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PodInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PodInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PodInfoMultiError, or nil if none found.
func (m *PodInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PodInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PodNamespace

	if utf8.RuneCountInString(m.GetPodName()) < 1 {
		err := PodInfoValidationError{
			field:  "PodName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PodTeamId

	// no validation rules for PodCpuMax

	// no validation rules for PodReplicas

	// no validation rules for PodMemoryMax

	for idx, item := range m.GetPodPort() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PodInfoValidationError{
						field:  fmt.Sprintf("PodPort[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PodInfoValidationError{
						field:  fmt.Sprintf("PodPort[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PodInfoValidationError{
					field:  fmt.Sprintf("PodPort[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPodEnv() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PodInfoValidationError{
						field:  fmt.Sprintf("PodEnv[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PodInfoValidationError{
						field:  fmt.Sprintf("PodEnv[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PodInfoValidationError{
					field:  fmt.Sprintf("PodEnv[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PodPullPolicy

	// no validation rules for PodRestart

	// no validation rules for PodType

	// no validation rules for PodImage

	if len(errors) > 0 {
		return PodInfoMultiError(errors)
	}

	return nil
}

// PodInfoMultiError is an error wrapping multiple validation errors returned
// by PodInfo.ValidateAll() if the designated constraints aren't met.
type PodInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodInfoMultiError) AllErrors() []error { return m }

// PodInfoValidationError is the validation error returned by PodInfo.Validate
// if the designated constraints aren't met.
type PodInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodInfoValidationError) ErrorName() string { return "PodInfoValidationError" }

// Error satisfies the builtin error interface
func (e PodInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodInfoValidationError{}

// Validate checks the field values on PodPort with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PodPort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodPort with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PodPortMultiError, or nil if none found.
func (m *PodPort) ValidateAll() error {
	return m.validate(true)
}

func (m *PodPort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PodId

	// no validation rules for ContainerPort

	// no validation rules for Protocol

	if len(errors) > 0 {
		return PodPortMultiError(errors)
	}

	return nil
}

// PodPortMultiError is an error wrapping multiple validation errors returned
// by PodPort.ValidateAll() if the designated constraints aren't met.
type PodPortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodPortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodPortMultiError) AllErrors() []error { return m }

// PodPortValidationError is the validation error returned by PodPort.Validate
// if the designated constraints aren't met.
type PodPortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodPortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodPortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodPortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodPortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodPortValidationError) ErrorName() string { return "PodPortValidationError" }

// Error satisfies the builtin error interface
func (e PodPortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodPort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodPortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodPortValidationError{}

// Validate checks the field values on PodEnv with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PodEnv) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodEnv with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PodEnvMultiError, or nil if none found.
func (m *PodEnv) ValidateAll() error {
	return m.validate(true)
}

func (m *PodEnv) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PodId

	// no validation rules for EnvKey

	// no validation rules for EnvValue

	if len(errors) > 0 {
		return PodEnvMultiError(errors)
	}

	return nil
}

// PodEnvMultiError is an error wrapping multiple validation errors returned by
// PodEnv.ValidateAll() if the designated constraints aren't met.
type PodEnvMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodEnvMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodEnvMultiError) AllErrors() []error { return m }

// PodEnvValidationError is the validation error returned by PodEnv.Validate if
// the designated constraints aren't met.
type PodEnvValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodEnvValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodEnvValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodEnvValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodEnvValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodEnvValidationError) ErrorName() string { return "PodEnvValidationError" }

// Error satisfies the builtin error interface
func (e PodEnvValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodEnv.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodEnvValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodEnvValidationError{}

// Validate checks the field values on PodId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PodId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PodIdMultiError, or nil if none found.
func (m *PodId) ValidateAll() error {
	return m.validate(true)
}

func (m *PodId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return PodIdMultiError(errors)
	}

	return nil
}

// PodIdMultiError is an error wrapping multiple validation errors returned by
// PodId.ValidateAll() if the designated constraints aren't met.
type PodIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodIdMultiError) AllErrors() []error { return m }

// PodIdValidationError is the validation error returned by PodId.Validate if
// the designated constraints aren't met.
type PodIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodIdValidationError) ErrorName() string { return "PodIdValidationError" }

// Error satisfies the builtin error interface
func (e PodIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodIdValidationError{}

// Validate checks the field values on Response with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Response with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResponseMultiError, or nil
// if none found.
func (m *Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Msg

	if len(errors) > 0 {
		return ResponseMultiError(errors)
	}

	return nil
}

// ResponseMultiError is an error wrapping multiple validation errors returned
// by Response.ValidateAll() if the designated constraints aren't met.
type ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseMultiError) AllErrors() []error { return m }

// ResponseValidationError is the validation error returned by
// Response.Validate if the designated constraints aren't met.
type ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseValidationError) ErrorName() string { return "ResponseValidationError" }

// Error satisfies the builtin error interface
func (e ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseValidationError{}

// Validate checks the field values on FindAll with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FindAll) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindAll with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FindAllMultiError, or nil if none found.
func (m *FindAll) ValidateAll() error {
	return m.validate(true)
}

func (m *FindAll) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FindAllMultiError(errors)
	}

	return nil
}

// FindAllMultiError is an error wrapping multiple validation errors returned
// by FindAll.ValidateAll() if the designated constraints aren't met.
type FindAllMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindAllMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindAllMultiError) AllErrors() []error { return m }

// FindAllValidationError is the validation error returned by FindAll.Validate
// if the designated constraints aren't met.
type FindAllValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindAllValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindAllValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindAllValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindAllValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindAllValidationError) ErrorName() string { return "FindAllValidationError" }

// Error satisfies the builtin error interface
func (e FindAllValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindAll.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindAllValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindAllValidationError{}

// Validate checks the field values on AllPod with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AllPod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllPod with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AllPodMultiError, or nil if none found.
func (m *AllPod) ValidateAll() error {
	return m.validate(true)
}

func (m *AllPod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPodInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllPodValidationError{
						field:  fmt.Sprintf("PodInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllPodValidationError{
						field:  fmt.Sprintf("PodInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllPodValidationError{
					field:  fmt.Sprintf("PodInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllPodMultiError(errors)
	}

	return nil
}

// AllPodMultiError is an error wrapping multiple validation errors returned by
// AllPod.ValidateAll() if the designated constraints aren't met.
type AllPodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllPodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllPodMultiError) AllErrors() []error { return m }

// AllPodValidationError is the validation error returned by AllPod.Validate if
// the designated constraints aren't met.
type AllPodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllPodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllPodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllPodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllPodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllPodValidationError) ErrorName() string { return "AllPodValidationError" }

// Error satisfies the builtin error interface
func (e AllPodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllPod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllPodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllPodValidationError{}
