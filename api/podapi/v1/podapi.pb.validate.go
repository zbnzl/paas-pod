// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: podapi/v1/podapi.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Pair with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Pair) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pair with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PairMultiError, or nil if none found.
func (m *Pair) ValidateAll() error {
	return m.validate(true)
}

func (m *Pair) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return PairMultiError(errors)
	}

	return nil
}

// PairMultiError is an error wrapping multiple validation errors returned by
// Pair.ValidateAll() if the designated constraints aren't met.
type PairMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PairMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PairMultiError) AllErrors() []error { return m }

// PairValidationError is the validation error returned by Pair.Validate if the
// designated constraints aren't met.
type PairValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PairValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PairValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PairValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PairValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PairValidationError) ErrorName() string { return "PairValidationError" }

// Error satisfies the builtin error interface
func (e PairValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPair.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PairValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PairValidationError{}

// Validate checks the field values on Request with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Request with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RequestMultiError, or nil if none found.
func (m *Request) ValidateAll() error {
	return m.validate(true)
}

func (m *Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetMethod()) < 1 {
		err := RequestValidationError{
			field:  "Method",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Path

	{
		sorted_keys := make([]string, len(m.GetHeader()))
		i := 0
		for key := range m.GetHeader() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetHeader()[key]
			_ = val

			// no validation rules for Header[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RequestValidationError{
							field:  fmt.Sprintf("Header[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RequestValidationError{
							field:  fmt.Sprintf("Header[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RequestValidationError{
						field:  fmt.Sprintf("Header[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetGet()))
		i := 0
		for key := range m.GetGet() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetGet()[key]
			_ = val

			// no validation rules for Get[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RequestValidationError{
							field:  fmt.Sprintf("Get[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RequestValidationError{
							field:  fmt.Sprintf("Get[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RequestValidationError{
						field:  fmt.Sprintf("Get[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetPost()))
		i := 0
		for key := range m.GetPost() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPost()[key]
			_ = val

			// no validation rules for Post[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RequestValidationError{
							field:  fmt.Sprintf("Post[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RequestValidationError{
							field:  fmt.Sprintf("Post[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RequestValidationError{
						field:  fmt.Sprintf("Post[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Body

	// no validation rules for Url

	if len(errors) > 0 {
		return RequestMultiError(errors)
	}

	return nil
}

// RequestMultiError is an error wrapping multiple validation errors returned
// by Request.ValidateAll() if the designated constraints aren't met.
type RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestMultiError) AllErrors() []error { return m }

// RequestValidationError is the validation error returned by Request.Validate
// if the designated constraints aren't met.
type RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestValidationError) ErrorName() string { return "RequestValidationError" }

// Error satisfies the builtin error interface
func (e RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestValidationError{}

// Validate checks the field values on Response with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Response with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResponseMultiError, or nil
// if none found.
func (m *Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	{
		sorted_keys := make([]string, len(m.GetHeader()))
		i := 0
		for key := range m.GetHeader() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetHeader()[key]
			_ = val

			// no validation rules for Header[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ResponseValidationError{
							field:  fmt.Sprintf("Header[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ResponseValidationError{
							field:  fmt.Sprintf("Header[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ResponseValidationError{
						field:  fmt.Sprintf("Header[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Body

	if len(errors) > 0 {
		return ResponseMultiError(errors)
	}

	return nil
}

// ResponseMultiError is an error wrapping multiple validation errors returned
// by Response.ValidateAll() if the designated constraints aren't met.
type ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseMultiError) AllErrors() []error { return m }

// ResponseValidationError is the validation error returned by
// Response.Validate if the designated constraints aren't met.
type ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseValidationError) ErrorName() string { return "ResponseValidationError" }

// Error satisfies the builtin error interface
func (e ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseValidationError{}

// Validate checks the field values on DeletePodApiRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePodApiRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePodApiRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePodApiRequestMultiError, or nil if none found.
func (m *DeletePodApiRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePodApiRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePodApiRequestMultiError(errors)
	}

	return nil
}

// DeletePodApiRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePodApiRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePodApiRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePodApiRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePodApiRequestMultiError) AllErrors() []error { return m }

// DeletePodApiRequestValidationError is the validation error returned by
// DeletePodApiRequest.Validate if the designated constraints aren't met.
type DeletePodApiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePodApiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePodApiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePodApiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePodApiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePodApiRequestValidationError) ErrorName() string {
	return "DeletePodApiRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePodApiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePodApiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePodApiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePodApiRequestValidationError{}

// Validate checks the field values on DeletePodApiReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeletePodApiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePodApiReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePodApiReplyMultiError, or nil if none found.
func (m *DeletePodApiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePodApiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePodApiReplyMultiError(errors)
	}

	return nil
}

// DeletePodApiReplyMultiError is an error wrapping multiple validation errors
// returned by DeletePodApiReply.ValidateAll() if the designated constraints
// aren't met.
type DeletePodApiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePodApiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePodApiReplyMultiError) AllErrors() []error { return m }

// DeletePodApiReplyValidationError is the validation error returned by
// DeletePodApiReply.Validate if the designated constraints aren't met.
type DeletePodApiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePodApiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePodApiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePodApiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePodApiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePodApiReplyValidationError) ErrorName() string {
	return "DeletePodApiReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePodApiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePodApiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePodApiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePodApiReplyValidationError{}

// Validate checks the field values on GetPodApiRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPodApiRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPodApiRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPodApiRequestMultiError, or nil if none found.
func (m *GetPodApiRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPodApiRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPodApiRequestMultiError(errors)
	}

	return nil
}

// GetPodApiRequestMultiError is an error wrapping multiple validation errors
// returned by GetPodApiRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPodApiRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPodApiRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPodApiRequestMultiError) AllErrors() []error { return m }

// GetPodApiRequestValidationError is the validation error returned by
// GetPodApiRequest.Validate if the designated constraints aren't met.
type GetPodApiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPodApiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPodApiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPodApiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPodApiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPodApiRequestValidationError) ErrorName() string { return "GetPodApiRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPodApiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPodApiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPodApiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPodApiRequestValidationError{}

// Validate checks the field values on GetPodApiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPodApiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPodApiReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetPodApiReplyMultiError,
// or nil if none found.
func (m *GetPodApiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPodApiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPodApiReplyMultiError(errors)
	}

	return nil
}

// GetPodApiReplyMultiError is an error wrapping multiple validation errors
// returned by GetPodApiReply.ValidateAll() if the designated constraints
// aren't met.
type GetPodApiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPodApiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPodApiReplyMultiError) AllErrors() []error { return m }

// GetPodApiReplyValidationError is the validation error returned by
// GetPodApiReply.Validate if the designated constraints aren't met.
type GetPodApiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPodApiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPodApiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPodApiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPodApiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPodApiReplyValidationError) ErrorName() string { return "GetPodApiReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetPodApiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPodApiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPodApiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPodApiReplyValidationError{}

// Validate checks the field values on ListPodApiRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPodApiRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPodApiRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPodApiRequestMultiError, or nil if none found.
func (m *ListPodApiRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPodApiRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListPodApiRequestMultiError(errors)
	}

	return nil
}

// ListPodApiRequestMultiError is an error wrapping multiple validation errors
// returned by ListPodApiRequest.ValidateAll() if the designated constraints
// aren't met.
type ListPodApiRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPodApiRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPodApiRequestMultiError) AllErrors() []error { return m }

// ListPodApiRequestValidationError is the validation error returned by
// ListPodApiRequest.Validate if the designated constraints aren't met.
type ListPodApiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPodApiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPodApiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPodApiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPodApiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPodApiRequestValidationError) ErrorName() string {
	return "ListPodApiRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPodApiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPodApiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPodApiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPodApiRequestValidationError{}

// Validate checks the field values on ListPodApiReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPodApiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPodApiReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPodApiReplyMultiError, or nil if none found.
func (m *ListPodApiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPodApiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListPodApiReplyMultiError(errors)
	}

	return nil
}

// ListPodApiReplyMultiError is an error wrapping multiple validation errors
// returned by ListPodApiReply.ValidateAll() if the designated constraints
// aren't met.
type ListPodApiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPodApiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPodApiReplyMultiError) AllErrors() []error { return m }

// ListPodApiReplyValidationError is the validation error returned by
// ListPodApiReply.Validate if the designated constraints aren't met.
type ListPodApiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPodApiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPodApiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPodApiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPodApiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPodApiReplyValidationError) ErrorName() string { return "ListPodApiReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListPodApiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPodApiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPodApiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPodApiReplyValidationError{}
